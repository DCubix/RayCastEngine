#include "game_canvas.h"

#include <iostream>
#include <algorithm>

static const u8 FONT[] = {
	0x00, 0x00, 0x00, 0x00, 0x00,// (space)
	0x00, 0x00, 0x5F, 0x00, 0x00,// !
	0x00, 0x07, 0x00, 0x07, 0x00,// "
	0x14, 0x7F, 0x14, 0x7F, 0x14,// #
	0x24, 0x2A, 0x7F, 0x2A, 0x12,// $
	0x23, 0x13, 0x08, 0x64, 0x62,// %
	0x36, 0x49, 0x55, 0x22, 0x50,// &
	0x00, 0x05, 0x03, 0x00, 0x00,// '
	0x00, 0x1C, 0x22, 0x41, 0x00,// (
	0x00, 0x41, 0x22, 0x1C, 0x00,// )
	0x08, 0x2A, 0x1C, 0x2A, 0x08,// *
	0x08, 0x08, 0x3E, 0x08, 0x08,// +
	0x00, 0x50, 0x30, 0x00, 0x00,// ,
	0x08, 0x08, 0x08, 0x08, 0x08,// -
	0x00, 0x60, 0x60, 0x00, 0x00,// .
	0x20, 0x10, 0x08, 0x04, 0x02,// /
	0x3E, 0x51, 0x49, 0x45, 0x3E,// 0
	0x00, 0x42, 0x7F, 0x40, 0x00,// 1
	0x42, 0x61, 0x51, 0x49, 0x46,// 2
	0x21, 0x41, 0x45, 0x4B, 0x31,// 3
	0x18, 0x14, 0x12, 0x7F, 0x10,// 4
	0x27, 0x45, 0x45, 0x45, 0x39,// 5
	0x3C, 0x4A, 0x49, 0x49, 0x30,// 6
	0x01, 0x71, 0x09, 0x05, 0x03,// 7
	0x36, 0x49, 0x49, 0x49, 0x36,// 8
	0x06, 0x49, 0x49, 0x29, 0x1E,// 9
	0x00, 0x36, 0x36, 0x00, 0x00,// :
	0x00, 0x56, 0x36, 0x00, 0x00,// ;
	0x00, 0x08, 0x14, 0x22, 0x41,// <
	0x14, 0x14, 0x14, 0x14, 0x14,// =
	0x41, 0x22, 0x14, 0x08, 0x00,// >
	0x02, 0x01, 0x51, 0x09, 0x06,// ?
	0x32, 0x49, 0x79, 0x41, 0x3E,// @
	0x7E, 0x11, 0x11, 0x11, 0x7E,// A
	0x7F, 0x49, 0x49, 0x49, 0x36,// B
	0x3E, 0x41, 0x41, 0x41, 0x22,// C
	0x7F, 0x41, 0x41, 0x22, 0x1C,// D
	0x7F, 0x49, 0x49, 0x49, 0x41,// E
	0x7F, 0x09, 0x09, 0x01, 0x01,// F
	0x3E, 0x41, 0x41, 0x51, 0x32,// G
	0x7F, 0x08, 0x08, 0x08, 0x7F,// H
	0x00, 0x41, 0x7F, 0x41, 0x00,// I
	0x20, 0x40, 0x41, 0x3F, 0x01,// J
	0x7F, 0x08, 0x14, 0x22, 0x41,// K
	0x7F, 0x40, 0x40, 0x40, 0x40,// L
	0x7F, 0x02, 0x04, 0x02, 0x7F,// M
	0x7F, 0x04, 0x08, 0x10, 0x7F,// N
	0x3E, 0x41, 0x41, 0x41, 0x3E,// O
	0x7F, 0x09, 0x09, 0x09, 0x06,// P
	0x3E, 0x41, 0x51, 0x21, 0x5E,// Q
	0x7F, 0x09, 0x19, 0x29, 0x46,// R
	0x46, 0x49, 0x49, 0x49, 0x31,// S
	0x01, 0x01, 0x7F, 0x01, 0x01,// T
	0x3F, 0x40, 0x40, 0x40, 0x3F,// U
	0x1F, 0x20, 0x40, 0x20, 0x1F,// V
	0x7F, 0x20, 0x18, 0x20, 0x7F,// W
	0x63, 0x14, 0x08, 0x14, 0x63,// X
	0x03, 0x04, 0x78, 0x04, 0x03,// Y
	0x61, 0x51, 0x49, 0x45, 0x43,// Z
	0x00, 0x00, 0x7F, 0x41, 0x41,// [
	0x02, 0x04, 0x08, 0x10, 0x20,// "\"
	0x41, 0x41, 0x7F, 0x00, 0x00,// ]
	0x04, 0x02, 0x01, 0x02, 0x04,// ^
	0x40, 0x40, 0x40, 0x40, 0x40,// _
	0x00, 0x01, 0x02, 0x04, 0x00,// `
	0x20, 0x54, 0x54, 0x54, 0x78,// a
	0x7F, 0x48, 0x44, 0x44, 0x38,// b
	0x38, 0x44, 0x44, 0x44, 0x20,// c
	0x38, 0x44, 0x44, 0x48, 0x7F,// d
	0x38, 0x54, 0x54, 0x54, 0x18,// e
	0x08, 0x7E, 0x09, 0x01, 0x02,// f
	0x08, 0x14, 0x54, 0x54, 0x3C,// g
	0x7F, 0x08, 0x04, 0x04, 0x78,// h
	0x00, 0x44, 0x7D, 0x40, 0x00,// i
	0x20, 0x40, 0x44, 0x3D, 0x00,// j
	0x00, 0x7F, 0x10, 0x28, 0x44,// k
	0x00, 0x41, 0x7F, 0x40, 0x00,// l
	0x7C, 0x04, 0x18, 0x04, 0x78,// m
	0x7C, 0x08, 0x04, 0x04, 0x78,// n
	0x38, 0x44, 0x44, 0x44, 0x38,// o
	0x7C, 0x14, 0x14, 0x14, 0x08,// p
	0x08, 0x14, 0x14, 0x18, 0x7C,// q
	0x7C, 0x08, 0x04, 0x04, 0x08,// r
	0x48, 0x54, 0x54, 0x54, 0x20,// s
	0x04, 0x3F, 0x44, 0x40, 0x20,// t
	0x3C, 0x40, 0x40, 0x20, 0x7C,// u
	0x1C, 0x20, 0x40, 0x20, 0x1C,// v
	0x3C, 0x40, 0x30, 0x40, 0x3C,// w
	0x44, 0x28, 0x10, 0x28, 0x44,// x
	0x0C, 0x50, 0x50, 0x50, 0x3C,// y
	0x44, 0x64, 0x54, 0x4C, 0x44,// z
	0x00, 0x08, 0x36, 0x41, 0x00,// {
	0x00, 0x00, 0x7F, 0x00, 0x00,// |
	0x00, 0x41, 0x36, 0x08, 0x00,// }
	0x08, 0x08, 0x2A, 0x1C, 0x08,// ->
	0x08, 0x1C, 0x2A, 0x08, 0x08 // <-
};

#define Clamp(x, a, b) (x < a ? a : x > b ? b : x)
#define Log(x) std::cerr << x << std::endl
#define Col(v) u8(Clamp(v * 255.0f, 0.0f, 255.0f));

GameCanvas::GameCanvas(GameAdapter *adapter, u32 width, u32 height, u32 downScale) {
	if (SDL_Init(SDL_INIT_EVERYTHING) > 0) {
		Log(SDL_GetError());
		return;
	}

	downScale = std::max(std::min(downScale, u32(6)), u32(1));
	m_width = width / downScale;
	m_height = height / downScale;
	m_adapter = std::unique_ptr<GameAdapter>(adapter);

	Log("SZ: " << m_width << "x" << m_height);

	m_window = SDL_CreateWindow(
		"Game Canvas",
		SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED,
		width, height,
		SDL_WINDOW_SHOWN
	);
	if (!m_window) {
		Log(SDL_GetError());
		SDL_Quit();
		return;
	}

	m_renderer = SDL_CreateRenderer(m_window, -1, SDL_RENDERER_ACCELERATED);
	if (!m_renderer) {
		Log(SDL_GetError());
		SDL_Quit();
		return;
	}

	m_buffer = SDL_CreateTexture(
		m_renderer,
		SDL_PIXELFORMAT_RGB24, SDL_TEXTUREACCESS_STREAMING,
		m_width, m_height
	);

}

void GameCanvas::clear(f32 r, f32 g, f32 b) {
	for (u32 i = 0; i < m_width * m_height; i++) {
		m_pixels[i * 3 + 0] = Col(r);
		m_pixels[i * 3 + 1] = Col(g);
		m_pixels[i * 3 + 2] = Col(b);
	}
}

void GameCanvas::put(i32 x, i32 y, f32 r, f32 g, f32 b) {
	if (x < 0 || x >= m_width || y < 0 || y >= m_height) return;
	u32 i = (x + y * m_width) * 3;
	m_pixels[i + 0] = Col(r);
	m_pixels[i + 1] = Col(g);
	m_pixels[i + 2] = Col(b);
}

void GameCanvas::rect(i32 x, i32 y, u32 w, u32 h, f32 r, f32 g, f32 b) {
	for (i32 ry = y; ry < y + h; ry++) {
		for (i32 rx = x; rx < x + w; rx++) {
			put(rx, ry, r, g, b);
		}
	}
}

void GameCanvas::line(i32 x1, i32 y1, i32 x2, i32 y2, f32 r, f32 g, f32 b) {
	int dx = std::abs(x2 - x1);
	int sx = x1 < x2 ? 1 : -1;
	int dy = -std::abs(y2 - y1);
	int sy = y1 < y2 ? 1 : -1;
	int err = dx + dy;
	int e2 = 0;

	int x = x1;
	int y = y1;

	while (true) {
		put(x, y, r, g, b);

		if (x == x2 && y == y2) break;
		e2 = 2 * err;
		if (e2 >= dy) { err += dy; x += sx; }
		if (e2 <= dx) { err += dx; y += sy; }
	}
}

i32 GameCanvas::chr(char c, i32 x, i32 y, f32 r, f32 g, f32 b) {
	c = c & 0x7F;
	if (c < ' ') {
		c = 0;
	} else {
		c -= ' ';
	}

	const u8* dat = &FONT[c * 5];

	for (i32 fx = 0; fx < 5; fx++) {
		for (i32 fy = 0; fy < 7; fy++) {
			if ((dat[fx] >> fy) & 1u) put(fx + x, fy + y, r, g, b);
		}
	}
	return x + 7;
}

i32 GameCanvas::str(const std::string& txt, i32 x, i32 y, f32 r, f32 g, f32 b) {
	i32 tx = x;
	for (auto&& c : txt) {
		tx = chr(c, tx, y, r, g, b);
	}
	return tx;
}

i32 GameCanvas::run() {
	if (m_renderer == nullptr || m_window == nullptr || m_buffer == nullptr)
		return -1;

	SDL_Event evt;
	bool running = true;

	const f64 timeStep = 1.0 / 60.0;
	f64 accum = 0.0, lastTime = f64(SDL_GetTicks()) / 1000.0;

	m_adapter->onSetup(this);

	while (running) {
		bool canRender = false;
		f64 currTime = f64(SDL_GetTicks()) / 1000.0;
		f64 delta = currTime - lastTime;
		lastTime = currTime;
		accum += delta;

		for (auto& e : m_keyboard) {
			e.second.pressed = false;
			e.second.released = false;
		}

		while (SDL_PollEvent(&evt)) {
			switch (evt.type) {
				case SDL_QUIT: running = false; break;
				case SDL_KEYDOWN: {
					m_keyboard[evt.key.keysym.sym].pressed = true;
					m_keyboard[evt.key.keysym.sym].held = true;
				} break;
				case SDL_KEYUP: {
					m_keyboard[evt.key.keysym.sym].released = true;
					m_keyboard[evt.key.keysym.sym].held = false;
				} break;
				default: break;
			}
		}

		while (accum >= timeStep) {
			m_adapter->onUpdate(this, f32(timeStep));
			accum -= timeStep;
			canRender = true;
		}

		if (canRender) {
			int pitch;
			SDL_LockTexture(m_buffer, nullptr, (void**) &m_pixels, &pitch);
			m_adapter->onDraw(this);
			SDL_UnlockTexture(m_buffer);

			SDL_RenderCopy(m_renderer, m_buffer, nullptr, nullptr);
			SDL_RenderPresent(m_renderer);
		}
	}


	SDL_DestroyTexture(m_buffer);
	SDL_DestroyRenderer(m_renderer);
	SDL_DestroyWindow(m_window);
	SDL_Quit();

	return 0;
}
